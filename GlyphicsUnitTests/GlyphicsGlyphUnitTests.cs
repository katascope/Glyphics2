#region Copyright
/*Copyright (c) 2015, Katascope
All rights reserved.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DRect, INDRect, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/
#endregion
using GraphicsLib;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using RasterLib;

namespace GlyphicsUnitTests
{
    [TestClass]
    public class GlyphicsGlyphUnitTests
    {
        [TestMethod]
        public void Glyph_Nop()
        {
            TestByGridComparison("Nop", "Nop", "");
        }

        [TestMethod]
        public void Glyph_Plot()
        {
            TestByGridComparison("Plot", "Size3D1 3 3 3;PenColorD1 56;Plot 1 1 1", "000000000000000000000000003800000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Genesis3D()
        {
            TestByGridComparison("Genesis3D", "Nop", "");
        }

        [TestMethod]
        public void Glyph_Spawn()
        {
            TestByGridComparison("Spawn", "Nop", "");
        }

        [TestMethod]
        public void Glyph_ArchPut()
        {
            TestByGridComparison("ArchPut", "Nop", "");
        }

        [TestMethod]
        public void Glyph_ArchLine()
        {
            TestByGridComparison("ArchLine", "Nop", "");
        }

        [TestMethod]
        public void Glyph_ArchRect()
        {
            TestByGridComparison("ArchRect", "Nop", "");
        }

        [TestMethod]
        public void Glyph_Clear()
        {
            TestByGridComparison("Clear", "Size3D1 2 2 2;PenColorD1 56;Clear", "3838383838383838");
        }

        [TestMethod]
        public void Glyph_Rect()
        {
            TestByGridComparison("Rect", "Size3D1 4 4 4;PenColorD1 56;Rect 1 1 1 2 2 2", "00000000000000000000000000000000000000000038380000383800000000000000000000383800003838000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_FillRect()
        {
            TestByGridComparison("FillRect", "Size3D1 4 4 4;PenColorD1 56;FillRect 1 1 1 2 2 2", "00000000000000000000000000000000000000000038380000383800000000000000000000383800003838000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Line()
        {
            TestByGridComparison("Line", "Size3D1 4 4 3;PenColorD1 56;Line 0 0 0 3 2 2", "380000000000000000000000000000000000000000383800000000000000000000000000000000000000003800000000");
        }

        [TestMethod]
        public void Glyph_WallCube()
        {
            TestByGridComparison("WallCube", "Size3D1 3 3 3;PenColorD1 255;WallCube 255", "FFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFF");
        }

        [TestMethod]
        public void Glyph_Supports()
        {
            TestByGridComparison("Supports", "Nop", "");
        }

        [TestMethod]
        public void Glyph_PenColorD1()
        {
            TestByGridComparison("PenColorD1", "Size2D1 3 3;PenColorD1 254;Plot 1 1 0", "00000000FE00000000");
        }

        [TestMethod]
        public void Glyph_PenColorD2()
        {
            TestByGridComparison("PenColorD2", "Size2D2 3 3;PenColorD2 254 253;Plot 1 1 0", "0000000000000000FEFD0000000000000000");
        }
        
        [TestMethod]
        public void Glyph_PenColorD3()
        {
            TestByGridComparison("PenColorD3", "Size2D3 3 3;PenColorD3 254 253 252;Plot 1 1 0", "000000000000000000000000FEFDFC000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_PenColorD4()
        {
            TestByGridComparison("PenColorD4", "Size2D4 3 3;PenColorD4 254 253 252 251;Plot 1 1 0", "00000000000000000000000000000000FEFDFCFB00000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_PenWidth()
        {
            TestByGridComparison("PenWidth", "Size2D1 7 7;PenColorD1 56;PenWidth 4;Plot 3 3 0", "00000000000000000000000000000000000000000000003838383800000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_PenHeight()
        {
            TestByGridComparison("PenHeight", "Size2D1 7 7;PenColorD1 56;PenHeight 4;Plot 3 3 0", "00000000000000000000000000000000003800000000000038000000000000380000000000003800000000000000000000");
        }

        [TestMethod]
        public void Glyph_PenDepth()
        {
            TestByGridComparison("PenDepth", "Size3D1 3 3 3;PenColorD1 56;PenDepth 3;Plot 2 2 1", "000000000000000038000000000000000038000000000000000038");
        }
        
        [TestMethod]
        public void Glyph_PenSize()
        {
            TestByGridComparison("PenSize", "Size2D1 7 7;PenColorD1 56;PenSize 4 4 4;Plot 3 3 0", "00000000000000000000000000000000383838380000003838383800000038383838000000383838380000000000000000");
        }

        [TestMethod]
        public void Glyph_PenShape()
        {
            TestByGridComparison("PenShape", "Nop", "");
        }

        [TestMethod]
        public void Glyph_PenTex()
        {
            TestByGridComparison("PenTex", "Nop", "");
        }
        
        [TestMethod]
        public void Glyph_PenGroup()
        {
            TestByGridComparison("PenGroup", "Nop", "");
        }
        
        [TestMethod]
        public void Glyph_PenPhysics()
        {
            TestByGridComparison("PenPhysics", "Nop", "");
        }

        [TestMethod]
        public void Glyph_PenHatch()
        {
            TestByGridComparison("PenHatch", "Size3D1 7 7 1;PenColorD1 255;PenHatch 3 2 1;FillCircle2D 3 3 0 4", "00FFFF00FF0000FFFFFFFFFFFF0000FFFF00FFFF00FFFFFFFFFFFFFF00FFFF00FFFF00FFFFFFFFFFFF0000FFFF00FF0000");
        }

        [TestMethod]
        public void Glyph_ArcXY()
        {
            TestByGridComparison("ArcXY", "Size3D1 8 8 1;PenColorD1 1;ArcXY 4 4 0 3 0 25", "00000000000000000000000000000000000000000101010000000000000001000000000000000101000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_ArcXZ()
        {
            TestByGridComparison("ArcXZ", "Size3D1 6 6 6;PenColorD1 255;ArcXZ 3 3 3 3 0 50", "000000000000000000000000000000000000000000FF000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFF00000000000000000000000000000000000000000000000000000000000000FF000000FF00000000000000000000000000000000000000000000000000000000000000FF000000FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_ArcYZ()
        {
            TestByGridComparison("ArcYZ", "Size3D1 6 6 6;PenColorD1 255;ArcYZ 3 3 3 3 0 50", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF0000000000FF0000000000FF0000000000000000000000000000000000000000000000FF0000000000000000000000000000000000000000000000000000000000FF0000000000FF0000000000000000000000000000000000000000000000000000000000000000000000FF0000000000000000000000000000000000000000000000000000000000000000000000FF0000000000FF0000000000FF0000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_ImgRotX()
        {
            TestByGridComparison("ImgRotX", "Size3D1 4 4 4;PenColorD1 56;Plot 2 1 2;ImgRotX", "00000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_ImgRotY()
        {
            TestByGridComparison("ImgRotY", "Size3D1 4 4 4;PenColorD1 56;Plot 2 1 1;ImgRotY", "00000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_ImgRotZ()
        {
            TestByGridComparison("ImgRotZ", "Size3D1 3 3 3;PenColorD1 56;Plot 2 1 1;ImgRotZ", "000000000000000000000000000000003800000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size1D1()
        {
            TestByGridComparison("Size1D1", "Size1D1 5", "0000000000");
        }

        [TestMethod]
        public void Glyph_Size2D1()
        {
            TestByGridComparison("Size2D1", "Size2D1 5 5", "00000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size3D1()
        {
            TestByGridComparison("Size3D1", "Size3D1 2 2 2", "0000000000000000");
        }

        [TestMethod]
        public void Glyph_Size1D2()
        {
            TestByGridComparison("Size1D2", "Size1D2 5", "00000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size2D2()
        {
            TestByGridComparison("Size2D2", "Size2D2 5 5", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size3D2()
        {
            TestByGridComparison("Size3D2", "Size3D2 3 3 3", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size1D3()
        {
            TestByGridComparison("Size1D3", "Size1D3 3", "000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size2D3()
        {
            TestByGridComparison("Size2D3", "Size2D3 3 3", "000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size3D3()
        {
            TestByGridComparison("Size3D3", "Size3D3 2 2 2", "000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size1D4()
        {
            TestByGridComparison("Size1D4", "Size1D4 3", "000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size2D4()
        {
            TestByGridComparison("Size2D4", "Size2D4 3 3", "000000000000000000000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Size3D4()
        {
            TestByGridComparison("Size3D4", "Size3D4 2 2 2", "0000000000000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Pal1D()
        {
            TestByGridComparison("Pal1D", "Size1D1 8;PenColorD1 56;Clear;Pal1D 5;Blit1D 0 1", "3800000000003838");
        }
        [TestMethod]
        public void Glyph_Pal2D()
        {
            TestByGridComparison("Pal2D", "Size2D1 5 5;PenColorD1 56;Clear;Pal2D 3 3;Blit2D 0 1 1", "38383838383800000038380000003838000000383838383838");
        }
        [TestMethod]
        public void Glyph_Pal3D()
        {
            TestByGridComparison("Pal3D", "Size3D1 3 3 3;PenColorD1 56;Clear;Pal3D 2 2 1;Blit3D 0 1 1 1", "383838383838383838383838380000380000383838383838383838");
        }
        [TestMethod]
        public void Glyph_PalFromVal1D()
        {
            TestByGridComparison("PalFromVal1D", "Size1D1 8;PalFromVal1D 6 1 2 3 4 5 6;Blit1D 0 1", "0001020304050600");
        }
        [TestMethod]
        public void Glyph_PalFromVal2D()
        {
            TestByGridComparison("PalFromVal2D", "Size2D1 4 4;PalFromVal2D 2 2 1 2 3 4;Blit2D 0 1 1", "00000000000102000003040000000000");
        }
        [TestMethod]
        public void Glyph_PalFromVal3D()
        {
            TestByGridComparison("PalFromVal3D", "Size3D1 4 4 4;PalFromVal3D 2 2 2 1 2 3 4 5 6 7 8;Blit3D 0 1 1 1", "00000000000000000000000000000000000000000001020000030400000000000000000000050600000708000000000000000000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_PalFromGrid1D()
        {
            TestByGridComparison("PalFromGrid1D", "Size2D1 5 5;PenColorD1 56;Clear;PalFromGrid1D 0 4;PenColorD1 0;Clear;Blit2D 0 0 2", "00000000000000000000383838380000000000000000000000");
        }
        [TestMethod]
        public void Glyph_PalFromGrid2D()
        {
            TestByGridComparison("PalFromGrid2D", "Size2D1 5 5;PenColorD1 56;Clear;PalFromGrid2D 0 0 4 4;PenColorD1 0;Clear;Blit2D 0 0 0", "38383838003838383800383838380038383838000000000000");
        }
        [TestMethod]
        public void Glyph_PalFromGrid3D()
        {
            TestByGridComparison("PalFromGrid3D", "Size3D1 4 4 3;PenColorD1 56;Clear;PalFromGrid3D 0 0 0 3 3 2;PenColorD1 0;Clear;Blit3D 0 0 0 0", "383838003838380038383800000000003838380038383800383838000000000000000000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_PalGen1D1()
        {
            TestByGridComparison("PalGen1D1", "Size1D1 16;Pal1D 16;PalGen1D1 0 0 255;Blit1D 0 0", "000F1F2F3F4F5F6F7F8F9FAFBFCFDFEF");
        }
        [TestMethod]
        public void Glyph_PalGen1D2()
        {
            TestByGridComparison("PalGen1D2", "Size1D2 16;Pal1D 16;PalGen1D2 0 0 255 255 0;Blit1D 0 0", "00FF0FEF1FDF2FCF3FBF4FAF5F9F6F8F7F7F8F6F9F5FAF4FBF3FCF2FDF1FEF0F");
        }
        [TestMethod]
        public void Glyph_PalGen1D3()
        {
            TestByGridComparison("PalGen1D3", "Size1D3 8;Pal1D 8;PalGen1D3 0 0 255 0 255 0 255;Blit1D 0 0", "00FF001FDF1F3FBF3F5F9F5F7F7F7F9F5F9FBF3FBFDF1FDF");
        }
        [TestMethod]
        public void Glyph_PalGen1D4()
        {
            TestByGridComparison("PalGen1D4", "Size1D4 8;Pal1D 8;PalGen1D4 0 0 0 0 0 255 255 255 255;Blit1D 0 0", "0000001F1F1F3F3F3F5F5F5F7F7F7F9F9F9FBFBFBFDFDFDF");
        }

        [TestMethod]
        public void Glyph_Blit1D()
        {
            TestByGridComparison("Blit1D", "Size1D1 8;PalFromVal1D 6 1 2 3 4 5 6;Blit1D 0 1", "0001020304050600");
        }

        [TestMethod]
        public void Glyph_Blit2D()
        {
            TestByGridComparison("Blit2D", "Size2D1 4 4;PalFromVal2D 2 2 1 2 3 4;Blit2D 0 1 1", "00000000000102000003040000000000");
        }

        [TestMethod]
        public void Glyph_Blit3D()
        {
            TestByGridComparison("Blit3D", "Size3D1 4 4 4;PalFromVal3D 2 2 2 1 2 3 4 5 6 7 8;Blit3D 0 1 1 1", "00000000000000000000000000000000000000000001020000030400000000000000000000050600000708000000000000000000000000000000000000000000");
        }
        
        [TestMethod]
        public void Glyph_RectBlit1D()
        {
            TestByGridComparison("RectBlit1D", "Size1D1 8;PalFromVal1D 6 1 2 3 4 5 6;RectBlit1D 0 1 4", "0001030500000000");
        }

        [TestMethod]
        public void Glyph_RectBlit2D()
        {
            TestByGridComparison("RectBlit2D", "Size2D1 4 4;PalFromVal2D 2 2 1 2 3 4;RectBlit2D 0 0 0 4 4", "01010202010102020303040403030404");
        }

        [TestMethod]
        public void Glyph_RectBlit3D()
        {
            TestByGridComparison("RectBlit3D", "Size3D1 4 4 4;PalFromVal3D 2 2 2 1 2 3 4 5 6 7 8;RectBlit3D 0 0 0 0 4 4 4", "01010202010102020303040403030404010102020101020203030404030304040505060605050606070708080707080805050606050506060707080807070808");
        }

        [TestMethod]
        public void Glyph_BlendBlit1D()
        {
            TestByGridComparison("BlendBlit1D", "Size1D1 8;PalFromVal1D 6 1 2 3 4 5 6;BlendBlit1D 0 1 4 50", "0000010200000000");
        }

        [TestMethod]
        public void Glyph_BlendBlit2D()
        {
            TestByGridComparison("BlendBlit2D", "Size2D1 4 4;PalFromVal2D 2 2 1 2 3 4;BlendBlit2D 0 0 0 4 4 50", "00000101000001010101020201010202");
        }

        [TestMethod]
        public void Glyph_BlendBlit3D()
        {
            TestByGridComparison("BlendBlit3D", "Size3D1 4 4 4;PalFromVal3D 2 2 2 1 2 3 4 5 6 7 8;BlendBlit3D 0 0 0 0 4 4 4 50", "00000101000001010101020201010202000001010000010101010202010102020202030302020303030304040303040402020303020203030303040403030404");
        }

        [TestMethod]
        public void Glyph_Triangle()
        {
            TestByGridComparison("Triangle", "Size3D1 4 4 3;PenColorD1 56;Triangle 1 1 0 3 3 1 2 3 2", "000000000038000000000000000000000000000000000000003838000000003800000000000000000000000000003800");
        }

        [TestMethod]
        public void Glyph_FillTriangle2D()
        {
            TestByGridComparison("FillTriangle2D", "Size3D1 8 8 1;PenColorD1 255;FillTriangle2D 0 0 0 8 8 8", "FF00000000000000FFFF000000000000FFFFFF0000000000FFFFFFFF00000000FFFFFFFFFF000000FFFFFFFFFFFF0000FFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF");
        }

        [TestMethod]
        public void Glyph_Circle2D()
        {
            TestByGridComparison("Circle2D", "Size3D1 5 5 1;PenColorD1 56;Circle2D 2 2 0 2", "00383838003800000038380000003838000000380038383800");
        }
        [TestMethod]
        public void Glyph_Circle2DXY()
        {
            TestByGridComparison("Circle2DXY", "Size3D1 5 5 5;PenColorD1 56;Circle2DXY 2 2 2 2", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003838380038000000383800000038380000003800383838000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_Circle2DYZ()
        {
            TestByGridComparison("Circle2DYZ", "Size3D1 5 5 5;PenColorD1 56;Circle2DYZ 2 2 2 2", "0000000000000038000000003800000000380000000000000000003800000000000000000000000000000000000000380000000038000000000000000000000000000000000000003800000000380000000000000000000000000000000000000038000000000000000000380000000038000000003800000000000000");
        }
        [TestMethod]
        public void Glyph_CircleDXZ()
        {
            TestByGridComparison("Circle2DXZ", "Size3D1 5 5 5;PenColorD1 56;Circle2DXZ 2 2 2 2", "0000000000000000000000383838000000000000000000000000000000000000000000380000003800000000000000000000000000000000000000003800000038000000000000000000000000000000000000000038000000380000000000000000000000000000000000000000003838380000000000000000000000");
        }
        [TestMethod]
        public void Glyph_FillCircle2D()
        {
            TestByGridComparison("FillCircle2D", "Size3D1 6 6 6;PenColorD1 56;FillCircle2DXY 3 3 3 2", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038380000003838383800003838383800003838383800000038380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_FillCircleCircle2DXY()
        {
            TestByGridComparison("FillCircle2DXY", "Size3D1 6 6 6;PenColorD1 56;FillCircle2DXY 3 3 3 2", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038380000003838383800003838383800003838383800000038380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_FillCircle2DXZ()
        {
            TestByGridComparison("FillCircle2DXZ", "Size3D1 6 6 6;PenColorD1 56;FillCircle2DXZ 3 3 3 2", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038380000000000000000000000000000000000000000000000000000000000000000003838383800000000000000000000000000000000000000000000000000000000000000003838383800000000000000000000000000000000000000000000000000000000000000003838383800000000000000000000000000000000000000000000000000000000000000000038380000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_FillCircle2DYZ()
        {
            TestByGridComparison("FillCircle2DYZ", "Size3D1 6 6 6;PenColorD1 56;FillCircle2DYZ 3 3 3 2", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000380000000000380000000000000000000000000000000000380000000000380000000000380000000000380000000000380000000000000000000000380000000000380000000000380000000000380000000000380000000000000000000000000000000000380000000000380000000000380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_Circle3D()
        {
            TestByGridComparison("Circle3D", "Size3D1 5 5 3;PenColorD1 56;Circle3D 2 2 1 2", "003838380038000000383800000038380000003800383838003838383838380000003838000000383800000038383838383800383838003800000038380000003838000000380038383800");
        }
        [TestMethod]
        public void Glyph_FillCircle3D()
        {
            TestByGridComparison("FillCircle3D", "Size3D1 5 5 3;PenColorD1 56;FillCircle3D 2 2 1 2", "003838380038383838383838383838383838383800383838003838383838383838383838383838383838383838383838383800383838003838383838383838383838383838380038383800");
        }

        [TestMethod]
        public void Glyph_Triangle2D()
        {
            //TestByGri, "Triangle2D", "Size3D1 6 6 1;PenColorD1 56;Triangle2D 1 1 5 3 2 5 0","000000000000003838000000003800383800000038000038000038383800000038000000");
        }
        [TestMethod]
        public void Glyph_Oval3D()
        {
            TestByGridComparison("Oval3D", "Size3D1 5 5 5;PenColorD1 56;Oval3D 2 2 2 3 2 3", "0000000000003838380038383838380038383800000000000000000000003838383838383838383838383838380000000000000000000038383838383838383838383838383800000000000000000000383838383838383838383838383838000000000000000000000038383800383838383800383838000000000000");
        }
        [TestMethod]
        public void Glyph_Diamond3D()
        {
            TestByGridComparison("Diamond2D", "Size3D1 5 5 1;PenColorD1 56;Diamond2D 2 2 0 1 1", "00000000000038380000383838380000383800000000000000");
        }
        [TestMethod]
        public void Glyph_Quad3D()
        {
            TestByGridComparison("Quad2D", "Size3D1 5 5 1;PenColorD1 56;Quad2D 1 2 3 3 0 2", "00380000000038383800003838380000003838000000000000");
        }
        [TestMethod]
        public void Glyph_Pyramid3D()
        {
            TestByGridComparison("Pyramid3D", "Size3D1 4 4 4;PenColorD1 56;Pyramid3D 0 0 0 3 3 3", "38383838000000000000000000000000383838380038380000000000000000003838383800383800000000000000000038383838000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_MaskRect()
        {
            TestByGridComparison("MaskRect", "Size3D1 4 4 4;PenColorD1 56;MaskRect 0 0 0 3 3 3 41", "38383838380000383800003838383838380000380000000000000000380000003800003800000000000000003800000038383838380000003800000038000000");
        }
        [TestMethod]
        public void Glyph_MaskFillRect()
        {
            TestByGridComparison("MaskFillRect", "Size3D1 3 3 3;PenColorD1 56;MaskFillRect 0 0 0 2 2 2 41", "383838383838383838383838380000380000383838380000380000");
        }

        [TestMethod]
        public void Glyph_TubeXY()
        {
            TestByGridComparison("TubeXY", "Size3D1 3 3 3;PenColorD1 56;TubeXY 0 0 0 2 2 2", "383838380038383838383838380038383838383838380038383838");
        }

        [TestMethod]
        public void Glyph_TubeYZ()
        {
            TestByGridComparison("TubeYZ", "Size3D1 3 3 3;PenColorD1 56;TubeYZ 0 0 0 2 2 2", "383838383838383838380038380038380038383838383838383838");
        }

        [TestMethod]
        public void Glyph_TubeXZ()
        {
            TestByGridComparison("TubeXZ", "Size3D1 3 3 3;PenColorD1 56;TubeXZ 0 0 0 2 2 2", "383838383838383838383838000000383838383838383838383838");
        }

        [TestMethod]
        public void Glyph_ImgFlipX()
        {
            TestByGridComparison("ImgFlipX", "Size2D1 5 5;PenColorD1 255;Plot 1 1 0;PenColorD1 127;Plot 1 3 0;ImgFlipX", "0000000000000000FF0000000000000000007F000000000000");
        }
        [TestMethod]
        public void Glyph_ImgFlipY()
        {
            TestByGridComparison("ImgFlipY", "Size2D1 5 5;PenColorD1 255;Plot 1 1 0;PenColorD1 127;Plot 1 3 0;ImgFlipY", "0000000000007F000000000000000000FF0000000000000000");
        }
        [TestMethod]
        public void Glyph_ImgFlipZ()
        {
            TestByGridComparison("ImgFlipZ", "Size3D1 3 3 3;PenColorD1 255;Plot 1 1 0;PenColorD1 127;Plot 1 2 0;ImgFlipZ", "00000000000000000000000000000000000000000000FF00007F00");
        }
        [TestMethod]
        public void Glyph_ImgMirrorX()
        {
            TestByGridComparison("ImgMirrorX", "Size3D1 5 5 1;PenColorD1 56;Circle2D 1 1 0 1;ImgMirrorX", "00380038003800380038003800380000000000000000000000");
        }
        [TestMethod]
        public void Glyph_ImgMirrorY()
        {
            TestByGridComparison("ImgMirrorY", "Size3D1 5 5 1;PenColorD1 56;Circle2D 1 1 0 1;ImgMirrorY", "00380000003800380000003800000038003800000038000000");
        }
        [TestMethod]
        public void Glyph_ImgMirrorZ()
        {
            TestByGridComparison("ImgMirrorZ", "Size3D1 3 3 3;PenColorD1 56;Plot 0 0 0;;Plot 1 1 0;ImgMirrorZ", "380000003800000000000000000000000000380000003800000000");
        }
        [TestMethod]
        public void Glyph_ImgPalettize()
        {
            TestByGridComparison("ImgPalettize", "Size2D1 4 4;PenColorD3 255 0 0;Plot 2 2 0;Pal1D 255;PalGen1D3 0 0 255 0 255 0 255;ImgPalettize 0", "00000000000000000000550000000000");
        }
        [TestMethod]
        public void Glyph_ImgInvert()
        {
            TestByGridComparison("ImgInvert", "Size3D4 5 5 1;PenColorD3 56 56 56;Circle2D 2 2 0 2;ImgInvert", "00000000C7C7C7FFC7C7C7FFC7C7C7FF00000000C7C7C7FF000000000000000000000000C7C7C7FFC7C7C7FF000000000000000000000000C7C7C7FFC7C7C7FF000000000000000000000000C7C7C7FF00000000C7C7C7FFC7C7C7FFC7C7C7FF00000000");
        }
        [TestMethod]
        public void Glyph_ImgGrayscale()
        {
            TestByGridComparison("ImgGrayscale", "Size3D3 3 3 1;PenColorD3 0 28 56;Circle2D 2 2 0 2;ImgGrayscale", "0000001C1C1C1C1C1C1C1C1C0000000000001C1C1C000000000000");
        }
        [TestMethod]
        public void Glyph_ImgColorize()
        {
            TestByGridComparison("ImgColorize", "Size3D3 3 3 1;PenColorD3 127 127 127;Clear;ImgColorize 0 50", "612020612020612020612020612020612020612020612020612020");
        }
        [TestMethod]
        public void Glyph_ImgHueshift()
        {
            TestByGridComparison("ImgHueshift", "Size3D3 3 3 1;PenColorD3 192 0 0;Clear;ImgHueshift 50", "C0A000C0A000C0A000C0A000C0A000C0A000C0A000C0A000C0A000");
        }
        [TestMethod]
        public void Glyph_ImgSaturate()
        {
            TestByGridComparison("ImgSaturate", "Size3D3 3 3 1;PenColorD3 255 0 127;Clear;ImgSaturate 150", "007EBE007EBE007EBE007EBE007EBE007EBE007EBE007EBE007EBE");
        }
        [TestMethod]
        public void Glyph_ImgBrightness()
        {
            TestByGridComparison("ImgBrightness", "Size3D3 3 3 1;PenColorD3 192 0 0;Clear;ImgBrightness 110", "D30000D30000D30000D30000D30000D30000D30000D30000D30000");
        }

        [TestMethod]
        public void Glyph_ImgShadeX()
        {
            TestByGridComparison("ImgShadeX", "Size3D3 3 3 3;PenColorD3 127 127 127;Clear;ImgShadeX 255 0 255 255 255 0", "FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55FF00FFFF55AAFFAA55");
        }
        [TestMethod]
        public void Glyph_ImgShadeY()
        {
            TestByGridComparison("ImgShadeY", "Size3D3 3 3 3;PenColorD3 127 127 127;Clear;ImgShadeY 255 0 255 255 255 0", "FF00FFFF00FFFF00FFFF55AAFF55AAFF55AAFFAA55FFAA55FFAA55FF00FFFF00FFFF00FFFF55AAFF55AAFF55AAFFAA55FFAA55FFAA55FF00FFFF00FFFF00FFFF55AAFF55AAFF55AAFFAA55FFAA55FFAA55");
        }
        [TestMethod]
        public void Glyph_ImgShadeZ()
        {
            TestByGridComparison("ImgShadeZ", "Size3D3 3 3 3;PenColorD3 127 127 127;Clear;ImgShadeZ 255 0 255 255 255 0", "FF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF00FFFF55AAFF55AAFF55AAFF55AAFF55AAFF55AAFF55AAFF55AAFF55AAFFAA55FFAA55FFAA55FFAA55FFAA55FFAA55FFAA55FFAA55FFAA55");
        }

        [TestMethod]
        public void Glyph_ImgEdge() { TestByGridComparison("ImgEdge", "Size3D4 3 3 3;PenColorD4 255 255 255 255;Plot 1 1 1;Plot 2 1 1;ImgEdge 255 0 0 0", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); }
        
        [TestMethod]
        public void Glyph_ImgEdgeX() { TestByGridComparison("ImgEdgeX", "Size3D4 3 3 3;PenColorD4 255 255 255 255;Plot 1 1 1;Plot 2 1 1;ImgEdgeX 255 0 0 0", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF000000FF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); }
        
        [TestMethod]
        public void Glyph_ImgEdgeY() { TestByGridComparison("ImgEdgeY", "Size3D4 3 3 3;PenColorD4 255 255 255 255;Plot 1 1 1;Plot 2 1 1;ImgEdgeY 255 0 0 0", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); }
        
        [TestMethod]
        public void Glyph_ImgEdgeZ() { TestByGridComparison("ImgEdgeZ", "Size3D4 3 3 3;PenColorD4 255 255 255 255;Plot 1 1 1;Plot 2 1 1;ImgEdgeZ 255 0 0 0", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"); }


        [TestMethod]
        public void Glyph_Text()
        {
            TestByGridComparison("Text", "Size3D1 7 7 1;PenColorD1 1;Text 1 1 0 65;ImgFlipY", "00000000000000000001010000000001000001000000010101010000000100000100000001000001000000000000000000");
        }
        [TestMethod]
        public void Glyph_Polygon()
        {
            TestByGridComparison("Polygon", "Size3D1 7 7 1;PenColorD1 1;Polygon 3 3 0 3 6", "00000000000000000001010100000001000000010001000000000001000100000001000000010101000000000000000000");
        }
        [TestMethod]
        public void Glyph_Stairs()
        {
            TestByGridComparison("Stairs", "Size3D1 10 10 1;PenColorD1 255;Stairs 1 1 0 9 9 0 3 1 1", "00000000000000000000FFFFFF0000000000000000FFFFFF0000000000000000FFFFFF0000000000000000FFFFFF0000000000000000FFFFFF0000000000000000FFFFFF0000000000000000FFFFFF0000000000000000FFFFFF0000000000000000FFFF");
        }
        [TestMethod]
        public void Glyph_ExtrudeLine()
        {
            TestByGridComparison("ExtrudeLine", "Size3D1 10 10 1;PenColorD1 255;ExtrudeLine 0 0 0 10 10 0 6 3 3", "00FFFFFF000000000000FF00FFFFFF0000000000FFFF00FFFFFF00000000FFFFFF00FFFFFF00000000FFFFFF00FFFFFF00000000FFFFFF00FFFFFF00000000FFFFFF00FFFFFF00000000FFFFFF00FFFF0000000000FFFFFF00FF000000000000FFFFFF00");
        }
        [TestMethod]
        public void Glyph_UpV()
        {
            TestByGridComparison("UpV", "Size3D4 3 3 1;UpV 4 255 255 255 255", "000000000000000000000000000000000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_GenChaos()
        {
            TestByGridComparison("GenChaos", "Nop", "");//"Size3D1 6 6 1;GenChaos 3 0 0 1", "04030100FFFD03020100FFFE0101000000FF000000000000FFFF00000001FDFEFF000102");
        }
        [TestMethod]
        public void Glyph_Scissor()
        {
            TestByGridComparison("Scissor", "Size3D1 4 4 3;PenColorD1 127;Scissor 1 1 1 2 2 1;Clear", "0000000000000000000000000000000000000000007F7F00007F7F000000000000000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_ExtrudeX() { TestByGridComparison("ExtrudeX", "Size3D1 6 6 6;PenColorD1 56;ExtrudeX 2 2 2 6 4 3 3 0", "000000000000000038383838000000000000000038383838000000000000000000000000000038383838000000000000000000000000000000000000000038383838000000000000000000000000000000000000000000000000000000000000000000000000000038383838000038383838000000000000000000000000000000000000000038383838000000000000000000000000000038383838000000000000000038383838000000000000000000000000000000000000000000000000000038383838000000000000000000000000000000000000"); }
        
        [TestMethod]
        public void Glyph_ExtrudY() { TestByGridComparison("ExtrudeY", "Size3D1 6 6 6;PenColorD1 56;ExtrudeY 2 2 2 6 4 4 4 0", "000000000000000000000000380000003800380000003800380000003800380000003800000000000000000000000000000000000038000000000038000000000038000000000038000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038000000000038000000000038000000000038000000000000000000000000380000003800380000003800380000003800380000003800000000000000000000000000003800380000003800380000003800380000003800380000"); }
        
        [TestMethod]
        public void Glyph_ExtrudeZ() { TestByGridComparison("ExtrudeZ", "Size3D1 6 6 6;PenColorD1 56;ExtrudeZ 2 2 2 6 4 3 3 0", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003800380000380000003800000000000038380000003800003800380000000038000000003800380000380000003800000000000038380000003800003800380000000038000000003800380000380000003800000000000038380000003800003800380000000038000000003800380000380000003800000000000038380000003800003800380000000038000000"); }

        [TestMethod]
        public void Glyph_FilterBlur()
        {
            TestByGridComparison("FilterBlur", "Size3D4 8 8 1;PenColorD3 56 56 56;FillCircle2D 4 4 0 3;FilterBlur
        }

        [TestMethod]
        public void Glyph_FilterMotion()
        {
            TestByGridComparison("FilterMotion", "Size3D4 10 10 1;PenColorD3 56 56 56;Circle2D 4 4 0 4;FilterMotion", "000000000C0C0CFF00000000060606FF0C0C0CFF2B2B2BFF0C0C0CFF0C0C0CFF000000000C0C0CFF0C0C0CFF00000000060606FF000000000C0C0CFF0C0C0CFF2B2B2BFF0C0C0CFF0C0C0CFF0000000000000000060606FF000000000C0C0CFF000000000C0C0CFF0C0C0CFF2B2B2BFF0C0C0CFF0C0C0CFF060606FF000000000C0C0CFF000000000C0C0CFF000000000C0C0CFF0C0C0CFF2B2B2BFF060606FF0C0C0CFF0C0C0CFF000000000C0C0CFF000000000C0C0CFF000000000C0C0CFF0C0C0CFF313131FF2B2B2BFF0C0C0CFF0C0C0CFF000000000C0C0CFF000000000C0C0CFF00000000060606FF060606FF0C0C0CFF2B2B2BFF0C0C0CFF0C0C0CFF000000000C0C0CFF00000000060606FF000000000C0C0CFF0C0C0CFF0C0C0CFF2B2B2BFF0C0C0CFF0C0C0CFF00000000060606FF000000000C0C0CFF00000000000000000C0C0CFF0C0C0CFF2B2B2BFF0C0C0CFF060606FF000000000C0C0CFF000000000C0C0CFF0C0C0CFF000000000C0C0CFF060606FF313131FF060606FF0C0C0CFF000000000C0C0CFF00000000");
        }

        [TestMethod]
        public void Glyph_FilterEdgeHor()
        {
            TestByGridComparison("FilterEdgeHor", "Size3D4 3 3 1;PenColorD4 255 255 255 255;Plot 1 1 0;FilterEdgeHor", "00000000000000000000000000000000FFFFFFFF00000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_FilterEdgeVer()
        {
            TestByGridComparison("FilterEdgeVer", "Size3D4 3 3 1;PenColorD4 255 255 255 255;Plot 1 1 0;FilterEdgeVer", "00000000000000000000000000000000FFFFFFFF00000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_FilterEmboss()
        {
            //TestByGridComparison("FilterEmboss", "Size3D1 5 5 1;PenColorD1 56;FillCircle2D 2 2 0 2;PenColorD1 255;FillCircle2D 2 2 0 1;FilterEmboss", "A8FFC70000FFFFFF0038C7FF00000000000000000038000000");
            TestByGridComparison("FilterEmboss", "Size3D4 3 3 1;PenColorD4 255 255 255 255;Plot 1 1 0;FilterEmboss", "FFFFFFFFFFFFFFFF00000000FFFFFFFF0000000000000000000000000000000000000000");
        }
        [TestMethod]
        public void Glyph_FilterEdgeAll()
        {
            TestByGridComparison("FilterEdgeAll", "Size3D4 10 10 1;PenColorD3 56 56 56;FillCircle2D 4 4 0 4;FilterEdgeAll
        }
        [TestMethod]
        public void Glyph_FilterSharpen()
        {
            TestByGridComparison("FilterSharpen", "Size3D4 10 10 1;PenColorD3 56 56 56;FillCircle2D 4 4 0 4;FilterSharpen
        }
        [TestMethod]
        public void Glyph_FilterSmooth()
        {
            TestByGridComparison("FilterSmooth", "Size3D4 10 10 1;PenColorD3 56 56 56;FillCircle2D 4 4 0 4;FilterSmooth", "00000000383838FFA8A8A8FFFFFFFFFFFFFFFFFFA8A8A8FF383838FF000000000000000000000000383838FFA8A8A8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8A8A8FF383838FF0000000000000000A8A8A8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8A8A8FF383838FF383838FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF707070FF707070FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8A8A8FFA8A8A8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF707070FF707070FFA8A8A8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8A8A8FF383838FF383838FF383838FFA8A8A8FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA8A8A8FF383838FF000000000000000000000000383838FFA8A8A8FFFFFFFFFFFFFFFFFFA8A8A8FF383838FF0000000000000000000000000000000000000000707070FFE0E0E0FFE0E0E0FF707070FF00000000000000000000000000000000");
        }

        [TestMethod]
        public void Glyph_Alien() { TestByGridComparison("Alien", "Size2D1 20 20;PenColorD1 8;Alien}

        [TestMethod]
        public void Glyph_Star() { TestByGridComparison("Star", "Size2D1 20 20;PenColorD1 8;Star}

        [TestMethod]
        public void Glyph_CornerSupports()
        {
            TestByGridComparison("CornerSupports", "Size3D1 15 15 5;PenColorD1 56;FillRect 0 7 0 13 7 15;CornerSupports 0 0 0 15 15 5",

        }

        [TestMethod]
        public void Glyph_FillTriangle()
        {
            TestByGridComparison("FillTriangle", "Size3D1 4 4 3;PenColorD1 56;FillTriangle 1 1 0 3 3 1 2 3 2", "000000000038000000003800000000000000000000000000003838000000003800000000000000000000000000003800");
        }

        [TestMethod]
        public void Glyph_Shadows()
        {
            TestByGridComparison("Shadows", "Size3D1 4 4 1;PenColorD4 63 127 255 255;WallCube 1;PenColorD4 255 255 127 255;Plot 2 2 0;Shadows", "3F3F1F3F000000000000FF0000000000");
        }

        [TestMethod]
        public void Glyph_FillStairs()
        {
            TestByGridComparison("FillStairs", "Size3D1 4 4 4;PenColorD4 31 127 255 255;FillRect 0 0 0 31 0 31;FillStairs 1 1 0 4 4 0 1 1 3", "1F1F1F1F001F1F1F00001F1F0000001F1F1F1F1F001F1F1F00001F1F0000001F1F1F1F1F0000000000000000000000001F1F1F1F000000000000000000000000");
        }

        //MathCompare two byte arrays, return true if equal/false if not.
        public static bool BytesAreEqual(byte[] result, byte[] expectedResult)
        {
            if (result.Length != expectedResult.Length) return false;

            for (int i = 0; i < result.Length; i++)
                if (result[i] != expectedResult[i]) return false;
            return true;
        }
 
        //Utility to compare run to expected output
        public static void TestByGridComparison(string name, string code, string expected)
        {
            bool validated = false;

            if (expected.Length == 0) return;

            if (code == null) validated = true;
            else
            {
                Grid grid = RasterLib.RasterApi.TokensToGrid(RasterLib.RasterApi.CodeToTokens(RasterLib.RasterApi.CreateCode(code)));

                if (grid != null)
                {
                    var cloneData = grid.CloneData();
                    if (BytesAreEqual(cloneData, RasterLib.RasterApi.HexDataToByteArray(expected)))
                        validated = true;
                }
                else validated = true;
            }
            Assert.IsTrue(validated);
        }
    }
}
